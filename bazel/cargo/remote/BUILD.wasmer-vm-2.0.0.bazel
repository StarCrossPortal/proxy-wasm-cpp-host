"""
@generated
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""

# buildifier: disable=load
load("@bazel_skylib//lib:selects.bzl", "selects")

# buildifier: disable=load
load(
    "@rules_rust//rust:rust.bzl",
    "rust_binary",
    "rust_library",
    "rust_test",
)

package(default_visibility = [
    # Public for visibility by "@raze__crate__version//" targets.
    #
    # Prefer access through "//bazel/cargo", which limits external
    # visibility to explicit Cargo.toml dependencies.
    "//visibility:public",
])

licenses([
    "notice",  # MIT from expression "MIT OR Apache-2.0"
])

# Generated Targets
# buildifier: disable=out-of-order-load
# buildifier: disable=load-on-top
load(
    "@rules_rust//cargo:cargo_build_script.bzl",
    "cargo_build_script",
)

cargo_build_script(
    name = "wasmer_vm_build_script",
    srcs = glob(["**/*.rs"]),
    build_script_env = {
    },
    crate_features = [
        "default",
        "enable-rkyv",
        "rkyv",
    ],
    crate_root = "lib/vm/build.rs",
    data = glob(["**"]),
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "2.0.0",
    visibility = ["//visibility:private"],
    deps = [
        "@proxy_wasm_cpp_host__cc__1_0_67//:cc",
    ] + selects.with_or({
        # cfg(target_os = "windows")
        (
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): [
        ],
        "//conditions:default": [],
    }),
)

rust_library(
    name = "wasmer_vm",
    srcs = glob(["**/*.rs"]),
    aliases = {
    },
    crate_features = [
        "default",
        "enable-rkyv",
        "rkyv",
    ],
    crate_root = "lib/vm/src/lib.rs",
    crate_type = "lib",
    data = [],
    edition = "2018",
    rustc_flags = [
        "--cap-lints=allow",
    ],
    tags = [
        "cargo-raze",
        "manual",
    ],
    version = "2.0.0",
    # buildifier: leave-alone
    deps = [
        ":wasmer_vm_build_script",
        "@proxy_wasm_cpp_host__backtrace__0_3_59//:backtrace",
        "@proxy_wasm_cpp_host__cfg_if__1_0_0//:cfg_if",
        "@proxy_wasm_cpp_host__indexmap__1_6_2//:indexmap",
        "@proxy_wasm_cpp_host__libc__0_2_94//:libc",
        "@proxy_wasm_cpp_host__loupe__0_1_3//:loupe",
        "@proxy_wasm_cpp_host__memoffset__0_6_3//:memoffset",
        "@proxy_wasm_cpp_host__more_asserts__0_2_1//:more_asserts",
        "@proxy_wasm_cpp_host__region__2_2_0//:region",
        "@proxy_wasm_cpp_host__rkyv__0_6_7//:rkyv",
        "@proxy_wasm_cpp_host__serde__1_0_126//:serde",
        "@proxy_wasm_cpp_host__thiserror__1_0_24//:thiserror",
        "@proxy_wasm_cpp_host__wasmer_types__2_0_0//:wasmer_types",
    ] + selects.with_or({
        # cfg(target_os = "windows")
        (
            "@rules_rust//rust/platform:i686-pc-windows-msvc",
            "@rules_rust//rust/platform:x86_64-pc-windows-msvc",
        ): [
            "@proxy_wasm_cpp_host__winapi__0_3_9//:winapi",
        ],
        "//conditions:default": [],
    }),
)
